import streamlit as st
import stl
from rich import print, inspect
import plotly.graph_objects as go
import numpy as np
from gridfinity_plate_generator import gridfinity_generator
import tempfile


def create_stl_figure(file_name):
    mesh = stl.mesh.Mesh.from_file(file_name)
    vectors = mesh.vectors

    reshaped_vectors = vectors.reshape(-1, 3)
    x = reshaped_vectors[:, 0]
    y = reshaped_vectors[:, 1]
    z = reshaped_vectors[:, 2]

    i = np.arange(0, len(reshaped_vectors), 3)
    j = np.arange(1, len(reshaped_vectors), 3)
    k = np.arange(2, len(reshaped_vectors), 3)

    fig = go.Figure(data=[
        go.Mesh3d(
            x=x,
            y=y,
            z=z,
            i=i,
            j=j,
            k=k,
            # color='lightpink',
            opacity=0.5,
            cauto=True,
        )
    ])

    fig.update_layout(
        scene=dict(
            aspectmode='data'
        )
    )
    return fig

@st.cache_data
def process_user_input(cols, rows):
    figs = {'bottom': {}, 'base': {}}

    with tempfile.NamedTemporaryFile() as tmpfile:
        filename = f"{tmpfile.name}_{cols}_{rows}_base.stl"
        gridfinity_generator.base(columns=cols, rows=rows, output_filename=filename)
        figs['bottom'] = {
            'figure': create_stl_figure(filename),
            'path': filename,
            'name': f"{tmpfile.name}_{cols}_{rows}_base.stl".split("/")[-1]
        }

    with tempfile.NamedTemporaryFile() as tmpfile:
        filename = f"{tmpfile.name}_bottom.stl"
        gridfinity_generator.bottom(columns=cols, rows=rows, output_filename=filename)
        figs['base'] = {
            'figure': create_stl_figure(filename),
            'path': filename,
            'name': f"{tmpfile.name}_{cols}_{rows}_bottom.stl".split("/")[-1]
        }

    return figs

def main():
    st.title("Gridfinity Buttom and Base Generator")
    st.markdown("Welcome! This tool allows you to create any sized gridfinity base plates or buttoms, which you can use to attach to your designs for them to into the gridfinity universe. Simply choose the number of rows and colums and download your print-ready stl files!")
    figs = {}
    with st.sidebar:
        with st.form("number_select_form"):
            rows = st.select_slider("rows", options=range(1,51))
            cols = st.select_slider("columns", options=range(1,51))
            submitted = st.form_submit_button("Generate!")

            if submitted:
                figs = process_user_input(cols, rows)
            #     st.write(f"rows: {rows} ---- cols: {cols}")

    st.subheader("Preview")
    col1, col2 = st.columns(2)
    if figs:
        col1.plotly_chart(figs['bottom']['figure'], use_container_width=True)
        col1.download_button(
            label="Download bottom plate",
            data=figs['bottom']['path'],
            mime="model/stl",
            file_name=figs['bottom']['name'],
        )

        col2.plotly_chart(figs['base']['figure'], use_container_width=True)
        col2.download_button(
            label="Download base plate",
            data=figs['base']['path'],
            mime="model/stl",
            file_name=figs['base']['name'],
        )
    else:
        st.write("Use the panel to the left to specify a gridsize and preview here!")

if __name__ == '__main__':
    main()
